(window.webpackJsonp=window.webpackJsonp||[]).push([[356],{631:function(t,a,s){"use strict";s.r(a);var i=s(14),e=Object(i.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[a("a",{attrs:{href:"https://codefun2000.com/p/P1973",target:"_blank",rel:"noopener noreferrer"}},[t._v("在线评测链接:P1973"),a("OutboundLink")],1)]),t._v(" "),a("h1",{attrs:{id:"题目内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题目内容"}},[t._v("#")]),t._v(" 题目内容")]),t._v(" "),a("p",[t._v("小美和小塔在玩一个游戏，游戏中有一个长度为"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("n")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("n")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.43056em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.43056em","vertical-align":"0em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit"},[t._v("n")])])])]),t._v("的数组"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("a")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("a")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.43056em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.43056em","vertical-align":"0em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit"},[t._v("a")])])])]),t._v(",她们会玩"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("q")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("q")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.43056em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.625em","vertical-align":"-0.19444em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.03588em"}},[t._v("q")])])])]),t._v("轮游戏，每轮游戏都是独立的。")]),t._v(" "),a("p",[t._v("游戏规则如下，双方都会执行最优策略：")]),t._v(" "),a("p",[a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("1")]),a("mo",[t._v(")")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("1)")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.75em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathrm"},[t._v("1")]),a("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v("第一步，游戏给出一个区间["),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("l")]),a("mo",{attrs:{separator:"true"}},[t._v(",")]),a("mi",[t._v("r")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("l,r")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.69444em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.8888799999999999em","vertical-align":"-0.19444em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.01968em"}},[t._v("l")]),a("span",{staticClass:"mpunct"},[t._v(",")]),a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.02778em"}},[t._v("r")])])])]),t._v("]。")]),t._v(" "),a("p",[a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("2")]),a("mo",[t._v(")")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("2)")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.75em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathrm"},[t._v("2")]),a("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v("第二步，小塔在["),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("l")]),a("mo",{attrs:{separator:"true"}},[t._v(",")]),a("mi",[t._v("r")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("l,r")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.69444em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.8888799999999999em","vertical-align":"-0.19444em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.01968em"}},[t._v("l")]),a("span",{staticClass:"mpunct"},[t._v(",")]),a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.02778em"}},[t._v("r")])])])]),t._v("]区间中选择一个数。")]),t._v(" "),a("p",[a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("3")]),a("mo",[t._v(")")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("3)")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.75em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathrm"},[t._v("3")]),a("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v("第三步，小美将区间扩展成["),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("L")]),a("mo",{attrs:{separator:"true"}},[t._v(",")]),a("mi",[t._v("R")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("L,R")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.68333em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.8777699999999999em","vertical-align":"-0.19444em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit"},[t._v("L")]),a("span",{staticClass:"mpunct"},[t._v(",")]),a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.00773em"}},[t._v("R")])])])]),t._v("] (["),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("L")]),a("mo",{attrs:{separator:"true"}},[t._v(",")]),a("mi",[t._v("R")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("L,R")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.68333em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.8777699999999999em","vertical-align":"-0.19444em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit"},[t._v("L")]),a("span",{staticClass:"mpunct"},[t._v(",")]),a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.00773em"}},[t._v("R")])])])]),t._v("]必须包含["),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("l")]),a("mo",{attrs:{separator:"true"}},[t._v(",")]),a("mi",[t._v("r")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("l,r")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.69444em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.8888799999999999em","vertical-align":"-0.19444em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.01968em"}},[t._v("l")]),a("span",{staticClass:"mpunct"},[t._v(",")]),a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.02778em"}},[t._v("r")])])])]),t._v("])，然后在["),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("L")]),a("mo",{attrs:{separator:"true"}},[t._v(",")]),a("mi",[t._v("R")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("L,R")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.68333em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.8777699999999999em","vertical-align":"-0.19444em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit"},[t._v("L")]),a("span",{staticClass:"mpunct"},[t._v(",")]),a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.00773em"}},[t._v("R")])])])]),t._v("]区间中选择一个数，但不能跟小塔选同一个数。")]),t._v(" "),a("p",[a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("4")]),a("mo",[t._v(")")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("4)")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.75em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathrm"},[t._v("4")]),a("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v("第四步，小美和小塔选择的数字较大的一方获胜，若相同则平局。")]),t._v(" "),a("p",[t._v("小美想知道她每一轮的输赢状态，并且她想知道要达到输赢状态所需的["),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("L")]),a("mo",{attrs:{separator:"true"}},[t._v(",")]),a("mi",[t._v("R")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("L,R")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.68333em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.8777699999999999em","vertical-align":"-0.19444em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit"},[t._v("L")]),a("span",{staticClass:"mpunct"},[t._v(",")]),a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.00773em"}},[t._v("R")])])])]),t._v("]区间长度最小是多少。")]),t._v(" "),a("h1",{attrs:{id:"输入描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#输入描述"}},[t._v("#")]),t._v(" 输入描述")]),t._v(" "),a("p",[t._v("第一行输入两个正整数"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("n")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("n")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.43056em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.43056em","vertical-align":"0em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit"},[t._v("n")])])])]),t._v("，"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("q")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("q")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.43056em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.625em","vertical-align":"-0.19444em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.03588em"}},[t._v("q")])])])]),t._v("(2≤n,q≤2×10^5),表示数组长度和询问次数。")]),t._v(" "),a("p",[t._v("第二行输入"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("n")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("n")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.43056em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.43056em","vertical-align":"0em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit"},[t._v("n")])])])]),t._v("个正整数"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("a")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("a")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.43056em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.43056em","vertical-align":"0em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit"},[t._v("a")])])])]),t._v("(1≤a_i≤10^9),表示数组。")]),t._v(" "),a("p",[t._v("接下来"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("q")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("q")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.43056em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.625em","vertical-align":"-0.19444em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.03588em"}},[t._v("q")])])])]),t._v("行，每行输入两个整数(1≤l≤r≤n)，表示询问")]),t._v(" "),a("h1",{attrs:{id:"输出描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#输出描述"}},[t._v("#")]),t._v(" 输出描述")]),t._v(" "),a("p",[t._v("对于每个询问先输出一行，若小美可以获胜则输出”"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("w")]),a("mi",[t._v("i")]),a("mi",[t._v("n")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("win")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.65952em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.65952em","vertical-align":"0em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.02691em"}},[t._v("w")]),a("span",{staticClass:"mord mathit"},[t._v("i")]),a("span",{staticClass:"mord mathit"},[t._v("n")])])])]),t._v("“,若平局则输出”"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("d")]),a("mi",[t._v("r")]),a("mi",[t._v("a")]),a("mi",[t._v("w")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("draw")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.69444em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.69444em","vertical-align":"0em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit"},[t._v("d")]),a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.02778em"}},[t._v("r")]),a("span",{staticClass:"mord mathit"},[t._v("a")]),a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.02691em"}},[t._v("w")])])])]),t._v("“,多失败则输出”"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("l")]),a("mi",[t._v("o")]),a("mi",[t._v("s")]),a("mi",[t._v("e")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("lose")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.69444em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.69444em","vertical-align":"0em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.01968em"}},[t._v("l")]),a("span",{staticClass:"mord mathit"},[t._v("o")]),a("span",{staticClass:"mord mathit"},[t._v("s")]),a("span",{staticClass:"mord mathit"},[t._v("e")])])])]),t._v("“。")]),t._v(" "),a("p",[t._v("第二行输出达到最终状态所需的区间长度的最小值。")]),t._v(" "),a("h2",{attrs:{id:"样例1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#样例1"}},[t._v("#")]),t._v(" 样例1")]),t._v(" "),a("p",[a("strong",[t._v("输入")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("6 2\n1 1 4 5 1 4\n1 3\n4 4\n")])])]),a("p",[a("strong",[t._v("输出")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("win\n4\nlose\n2\n")])])]),a("p",[a("strong",[t._v("说明")])]),t._v(" "),a("p",[t._v("第"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("1")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("1")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathrm"},[t._v("1")])])])]),t._v("个询问，小塔会选择数字"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("4")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("4")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathrm"},[t._v("4")])])])]),t._v("，小美将区间扩展成["),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("1")]),a("mo",{attrs:{separator:"true"}},[t._v(",")]),a("mn",[t._v("4")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("1,4")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.8388800000000001em","vertical-align":"-0.19444em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathrm"},[t._v("1")]),a("span",{staticClass:"mpunct"},[t._v(",")]),a("span",{staticClass:"mord mathrm"},[t._v("4")])])])]),t._v("]，选择数字"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("5")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("5")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathrm"},[t._v("5")])])])]),t._v("，小美获胜，扩展后的区间长度为"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("4")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("4")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathrm"},[t._v("4")])])])]),t._v("。")]),t._v(" "),a("p",[t._v("第"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("2")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("2")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathrm"},[t._v("2")])])])]),t._v("个询问，小塔会选择数字"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("5")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("5")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathrm"},[t._v("5")])])])]),t._v("，小美将区间扩展成["),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("3")]),a("mo",{attrs:{separator:"true"}},[t._v(",")]),a("mn",[t._v("4")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("3,4")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.8388800000000001em","vertical-align":"-0.19444em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathrm"},[t._v("3")]),a("span",{staticClass:"mpunct"},[t._v(",")]),a("span",{staticClass:"mord mathrm"},[t._v("4")])])])]),t._v("]，选择数字"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("4")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("4")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathrm"},[t._v("4")])])])]),t._v("，小塔获胜，扩展后的区间长度为"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mn",[t._v("2")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("2")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathrm"},[t._v("2")])])])]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/split.png",alt:"split"}})]),t._v(" "),a("h2",{attrs:{id:"思路-单调栈-st表-线段树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#思路-单调栈-st表-线段树"}},[t._v("#")]),t._v(" 思路：单调栈+ST表/线段树")]),t._v(" "),a("p",[t._v("显然，对于先手仅能选取"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mo",[t._v("[")]),a("mi",[t._v("l")]),a("mo",{attrs:{separator:"true"}},[t._v(",")]),a("mi",[t._v("r")]),a("mo",[t._v("]")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("[l,r]")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.75em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mopen"},[t._v("[")]),a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.01968em"}},[t._v("l")]),a("span",{staticClass:"mpunct"},[t._v(",")]),a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.02778em"}},[t._v("r")]),a("span",{staticClass:"mclose"},[t._v("]")])])])]),t._v("中最大的数，因此我们需要知道该区间的最大值，可以用ST表/线段树等数据结构进行预处理，同时我们处理出最大值所在的位置，额外用数组记录即可。")]),t._v(" "),a("p",[t._v("而对于后手，要求"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mo",[t._v("[")]),a("mi",[t._v("L")]),a("mo",{attrs:{separator:"true"}},[t._v(",")]),a("mi",[t._v("R")]),a("mo",[t._v("]")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("[L,R]")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.75em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mopen"},[t._v("[")]),a("span",{staticClass:"mord mathit"},[t._v("L")]),a("span",{staticClass:"mpunct"},[t._v(",")]),a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.00773em"}},[t._v("R")]),a("span",{staticClass:"mclose"},[t._v("]")])])])]),t._v("最小且要赢，说明要找到两边区间内大于"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mo",[t._v("[")]),a("mi",[t._v("l")]),a("mo",{attrs:{separator:"true"}},[t._v(",")]),a("mi",[t._v("r")]),a("mo",[t._v("]")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("[l,r]")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.75em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mopen"},[t._v("[")]),a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.01968em"}},[t._v("l")]),a("span",{staticClass:"mpunct"},[t._v(",")]),a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.02778em"}},[t._v("r")]),a("span",{staticClass:"mclose"},[t._v("]")])])])]),t._v("中最大值且距离最近的位置。可以使用单调栈来预处理。")]),t._v(" "),a("p",[t._v("对于"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("msub",[a("mi",[t._v("a")]),a("mi",[t._v("i")])],1)],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("a_i")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.43056em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.58056em","vertical-align":"-0.15em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord"},[a("span",{staticClass:"mord mathit"},[t._v("a")]),a("span",{staticClass:"vlist"},[a("span",{staticStyle:{top:"0.15em","margin-right":"0.05em","margin-left":"0em"}},[a("span",{staticClass:"fontsize-ensurer reset-size5 size5"},[a("span",{staticStyle:{"font-size":"0em"}},[t._v("​")])]),a("span",{staticClass:"reset-textstyle scriptstyle cramped"},[a("span",{staticClass:"mord mathit"},[t._v("i")])])]),a("span",{staticClass:"baseline-fix"},[a("span",{staticClass:"fontsize-ensurer reset-size5 size5"},[a("span",{staticStyle:{"font-size":"0em"}},[t._v("​")])]),t._v("​")])])])])])]),t._v("右边的最大值，我们维护一个单调递减栈，从左往右枚举，当栈头出栈时，当前数即为栈头右侧第一个比它大的数的位置，记录即可。")]),t._v(" "),a("p",[t._v("对于左侧同理。")]),t._v(" "),a("p",[t._v("找到左右两侧更大的数（或者找不到就是输），比较位置远近即可。")]),t._v(" "),a("h2",{attrs:{id:"代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[t._v("#")]),t._v(" 代码")]),t._v(" "),a("h3",{attrs:{id:"c"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c"}},[t._v("#")]),t._v(" C++")]),t._v(" "),a("div",{staticClass:"language-C++ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n#include <climits>\n\nusing namespace std;\n\n// 定义全局变量\nint n, k; // 数组长度和查询次数\nvector<int> elements, log_values; // 元素数组和log值数组\nvector<vector<int>> sparse_table; // 稀疏表\nvector<int> left_greater_indices, right_greater_indices; // 每个元素左边和右边第一个比它大的元素的索引\n\n// 构建log值数组\nvoid buildLogValues() {\n    for (int i = 2; i <= n; i++) {\n        log_values[i] = log_values[i / 2] + 1; // 通过前一个元素的log值计算当前元素的log值\n    }\n}\n\n// 构建稀疏表\nvoid buildSparseTable() {\n    for (int i = 0; i < n; i++) {\n        sparse_table[i][0] = i; // 初始化稀疏表的第一列为元素的索引\n    }\n\n    int j = 1;\n    while ((1 << j) <= n) { // 根据区间长度迭代稀疏表的列\n        for (int i = 0; i <= n - (1 << j); i++) {\n            int left_index = sparse_table[i][j - 1]; // 左区间的最大值索引\n            int right_index = sparse_table[i + (1 << (j - 1))][j - 1]; // 右区间的最大值索引\n            sparse_table[i][j] = (elements[left_index] >= elements[right_index]) ? left_index : right_index; // 将较大值的索引存入稀疏表\n        }\n        j++;\n    }\n}\n\n// 在区间[left, right]中找到最大值的索引\nint findMaxIndex(int left, int right) {\n    int span = log_values[right - left + 1]; // 计算区间长度的log值\n    int left_index = sparse_table[left][span]; // 左区间的最大值索引\n    int right_index = sparse_table[right - (1 << span) + 1][span]; // 右区间的最大值索引\n    return (elements[left_index] >= elements[right_index]) ? left_index : right_index; // 返回较大值的索引\n}\n\n// 计算每个元素左边和右边第一个大于它的元素的索引\nvoid calculateGreaterIndices() {\n    right_greater_indices.assign(n, -1); // 初始化右侧第一个大于元素的索引数组\n    left_greater_indices.assign(n, -1); // 初始化左侧第一个大于元素的索引数组\n    vector<int> stack; // 用于存储索引的栈\n\n    // 计算右侧第一个大于该元素的索引\n    for (int i = 0; i < n; i++) {\n        while (!stack.empty() && elements[stack.back()] <= elements[i]) {\n            right_greater_indices[stack.back()] = i; // 更新右侧第一个大于该元素的索引\n            stack.pop_back(); // 弹出栈顶元素\n        }\n        stack.push_back(i); // 当前元素的索引入栈\n    }\n\n    stack.clear(); // 清空栈\n\n    // 计算左侧第一个大于该元素的索引\n    for (int i = n - 1; i >= 0; i--) {\n        while (!stack.empty() && elements[stack.back()] <= elements[i]) {\n            left_greater_indices[stack.back()] = i; // 更新左侧第一个大于该元素的索引\n            stack.pop_back(); // 弹出栈顶元素\n        }\n        stack.push_back(i); // 当前元素的索引入栈\n    }\n}\n\n// 处理查询\nvoid processQueries(const vector<int>& max_indices, int max_val_count) {\n    for (int i = 0; i < k; i++) {\n        int left, right;\n        cin >> left >> right;\n        left -= 1; // 转换为0-based索引\n        right -= 1; // 转换为0-based索引\n\n        int max_index = findMaxIndex(left, right); // 在区间[left, right]中找到最大值的索引\n\n        if (elements[max_index] == elements[max_indices[0]]) { // 如果区间最大值等于全局最大值\n            if (max_val_count >= 2) { // 如果全局最大值出现次数大于等于2次\n                cout << "draw" << endl;\n                int lower_bound_idx = lower_bound(max_indices.begin(), max_indices.end(), left) - max_indices.begin(); // 找到大于等于left的第一个最大值索引\n                int upper_bound_idx = upper_bound(max_indices.begin(), max_indices.end(), right) - max_indices.begin() - 1; // 找到小于等于right的最后一个最大值索引\n                if (lower_bound_idx < upper_bound_idx) {\n                    cout << right - left + 1 << endl; // 如果在查询区间内有两个最大值，输出查询区间的长度\n                } else {\n                    int adjustment = INT_MAX; // 初始化调整值\n                    if (lower_bound_idx > 0) {\n                        adjustment = min(adjustment, max_indices[lower_bound_idx] - left); // 计算调整值\n                    }\n                    if (upper_bound_idx < (int)max_indices.size() - 1) {\n                        adjustment = min(adjustment, right - max_indices[upper_bound_idx]); // 计算调整值\n                    }\n                    cout << right - left + 1 + adjustment << endl; // 输出调整后的长度\n                }\n            } else {\n                cout << "lose" << endl;\n                cout << (left == right ? 2 : right - left + 1) << endl; // 如果全局最大值只有1次，输出"lose"并输出查询区间的长度\n            }\n        } else {\n            int left_boundary = (left_greater_indices[max_index] != -1) ? left_greater_indices[max_index] : -0x3f3f3f3f; // 左侧第一个大于max_index元素的索引\n            int right_boundary = (right_greater_indices[max_index] != -1) ? right_greater_indices[max_index] : 0x3f3f3f3f; // 右侧第一个大于max_index元素的索引\n            cout << "win" << endl;\n            cout << min(right_boundary - right, left - left_boundary) + right - left + 1 << endl; // 输出查询区间的长度\n        }\n    }\n}\n\nint main() {\n\tstd::ios::sync_with_stdio(false); // 提高输入输出效率\n    cin >> n >> k; // 输入数组长度和查询次数\n    elements.resize(n); // 调整元素数组大小\n    log_values.resize(n + 1, 0); // 初始化log值数组\n    sparse_table.assign(n, vector<int>((int)log2(n) + 1, 0)); // 初始化稀疏表\n\n    // 输入元素数组\n    for (int i = 0; i < n; i++) {\n        cin >> elements[i];\n    }\n\n    // 构建log值和稀疏表\n    buildLogValues();\n    buildSparseTable();\n\n    // 计算左右侧第一个大于元素的索引\n    calculateGreaterIndices();\n\n    int max_val = *max_element(elements.begin(), elements.end()); // 找到元素数组中的最大值\n    int max_val_count = count(elements.begin(), elements.end(), max_val); // 计算最大值的出现次数\n    vector<int> max_indices; // 存储最大值的所有索引\n\n    // 找出最大值的所有索引\n    for (int i = 0; i < n; i++) {\n        if (elements[i] == max_val) {\n            max_indices.push_back(i); // 如果当前元素等于最大值，存储它的索引\n        }\n    }\n\n    // 处理查询\n    processQueries(max_indices, max_val_count);\n\n    return 0;\n}\n\n')])])])])}),[],!1,null,null,null);a.default=e.exports}}]);